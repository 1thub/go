# This is a basic workflow to help you get started with Actions

name: build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  schedule:
    - cron: "*/10 * * * *"

env:
  TZ: Asia/Shanghai

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: install dependencies
        run: |
          sudo dpkg --add-architecture i386
          # wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
          # sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'
          sudo apt-get update
          sudo apt-get -yq install wine32
          sudo apt-get -yq install openssl unzip
          sudo apt-get -yq install \
          wget \
          unzip \
          gconf-service \
          libasound2 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgcc1 \
          libgconf-2-4 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          ca-certificates \
          fonts-liberation \
          libappindicator1 \
          libnss3 \
          lsb-release \
          xdg-utils \
          tree \
          curl

      - name: decode
        run: |
          openssl enc -aes-256-cbc -pbkdf2 -d -in 1-1.db -out 1-1.zip -pass pass:"${{ secrets.OPENSSL_KEY }}"
          openssl enc -aes-256-cbc -pbkdf2 -d -in 1-2.db -out 1-2.zip -pass pass:"${{ secrets.OPENSSL_KEY }}"
          openssl enc -aes-256-cbc -pbkdf2 -d -in 2.db -out 2.zip -pass pass:"${{ secrets.OPENSSL_KEY }}"
          openssl enc -aes-256-cbc -pbkdf2 -d -in 3.db -out 3.zip -pass pass:"${{ secrets.OPENSSL_KEY }}"

      - name: unzip
        run: |
          unzip -o 1-1.zip
          unzip -o 1-2.zip
          unzip -o 2.zip
          unzip -o 3.zip
          sudo chmod a+x 2/2
          sudo chmod a+x 3/3

      - name: build
        run: |
          ( cd 1 && nohup wine ./1.exe /nogui >~/1.log 2>&1 & )
          ( cd 2/resource && wget -q http://commondatastorage.googleapis.com/chromium-browser-snapshots/Linux_x64/737027/chrome-linux.zip && unzip -qq chrome-linux.zip )
          ( cd 2 && nohup ./2 -test 98714 -ocr 127.0.0.1:12345 >~/2.log 2>&1 & )
          # ( cd 3 && nohup ./3 >~/3.log 2>&1 & )
          # tail -f ~/1.log ~/2.log ~/3.log
          ( cd 3 && timeout -s 2 30m ./3 ; exit 0 )







